upstream puma {
  server unix://<%= puma_sock_file %> fail_timeout=0;
}

<% if domain =~ /^www\./ || (defined?(ssl) && ssl[:certificate]) %>
server {
  listen 80;
  server_name <%= [domain, domain.gsub(/^www\./, "")].uniq.join(" ") %>;

  location / {
    # disgard anything but GET and HEAD requests
    if ($request_method !~ ^(GET|HEAD)$) {
      return 405;
    }
    # redirect to the main site
    rewrite ^/(.*)$  http<%= "s" if defined?(ssl) && ssl[:certificate] %>://<%= domain %>/$1 permanent;
  }
  
  error_page 405 <%= current_path %>/405.html;
}
<% end %>

server {
  listen <%= defined?(ssl) && ssl[:certificate] ? "443 ssl" : "80" %> default deferred;

  # Set the domain
  server_name <%= domain %>;

  <% if defined?(ssl) && ssl[:certificate] %># Configure SSL
  ssl on;
  ssl_certificate <%= ssl.fetch(:certificate) %>;
  ssl_certificate_key <%= ssl.fetch(:certificate_key) %>;
  ssl_protocols <%= ssl[:protocols] || "SSLv2 SSLv3 TLSv1" %>;
  ssl_ciphers <%= ssl[:ciphers] || "RC4:HIGH:!aNULL:!MD5" %>;
  ssl_prefer_server_ciphers on;<% end %>

  # Handle uploads upto 4 gigabytes
  client_max_body_size 4G;

  # Timeout persistent connections after 10 seconds
  keepalive_timeout 10;

  # Location of our static files
  root <%= current_path %>/public;

  # Attempt to find the file, if not, serve via puma
  try_files $uri/index.html $uri @puma;

  location @puma {
    # if the maintenance page exists, throw a 503 error
    if (-f <%= shared_path %>/system/maintenance.html) {
      return 503;
      break;
    }
  
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://puma;
  }
  
  location @maintenance {
    # retry after 5 minutes
    add_header Retry-After 300;
    # if the maintenance page exists, render it
    if (-f <%= shared_path %>/system/maintenance.html) {
      rewrite ^(.*)$ <%= shared_path %>/system/maintenance.html break;
    }
    # otherwise default to the standard 503
    rewrite ^(.*)$ /503.html break;
  }

  error_page 401 /401.html;
  error_page 404 /404.html;
  error_page 405 /405.html;
  error_page 422 /422.html;
  error_page 500 /500.html;
  error_page 502 /502.html;
  error_page 503 @maintenance;
  error_page 504 /504.html;
}

server {
  listen 80;
  
  # Set the domain
  server_name origin.<%= domain.gsub(/^www\./, "") %>;
  
  # Timeout persistent connections after 10 seconds
  keepalive_timeout 10;
  
  # Location of our static files
  root <%= current_path %>/public;
  
  # Attempt to find the file
  try_files $uri/index.html $uri;

  location / {
    # all these files expire in the future
    expires max;
    # they are publicly (proxy) cachable
    add_header Cache-Control public;
  }
}
